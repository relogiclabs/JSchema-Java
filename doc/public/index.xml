<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on JSchema</title>
    <link>https://relogiclabs.github.io/JSchema-Java/</link>
    <description>Recent content in Introduction on JSchema</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jan 2024 09:38:53 +0600</lastBuildDate>
    <atom:link href="https://relogiclabs.github.io/JSchema-Java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/introduction/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/introduction/</guid>
      <description>Introduction JSchema, a customizable JSON Schema, prioritizes simplicity, conciseness, and readability, making it intuitive and accessible without the need for extensive prior knowledge. It offers efficient read-write facilities, precise JSON document definition through various data types and functions, and extensibility to meet modern web service diverse requirements.&#xA;JSON, short for JavaScript Object Notation, is one of the most widely used data exchange formats that are both user-friendly and machine-readable. JSchema is a practical tool for defining and validating the structure of JSON documents.</description>
    </item>
    <item>
      <title>Quick Start</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/quickstart/</link>
      <pubDate>Fri, 03 Nov 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/quickstart/</guid>
      <description>Getting Started This guide will walk you through the essential steps to quickly get up and running with the JSchema library. It is also assumed a modest familiarity with the Java language, Java SDK, and Java command-line interface, including basic familiarity with Maven packages.&#xA;Maven Library Package To get started, launch your preferred IDE (such as IntelliJ IDEA, NetBeans IDE, Eclipse IDE, or VS Code) and open the Java project where you intend to include this library package.</description>
    </item>
    <item>
      <title>Validation Syntax</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/validation/</link>
      <pubDate>Mon, 04 Dec 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/validation/</guid>
      <description>Validation Syntax A JSON document is a structured data format used for the exchange of information between applications. It primarily consists of two types of values: composite values and non-composite values, the latter also referred to as primitive values.&#xA;Composite values in a JSON document act as containers. They can hold zero or more composite or non-composite primitive values. These composite values provide the structural framework for organizing data hierarchically within JSON documents.</description>
    </item>
    <item>
      <title>Directives</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/directives/</link>
      <pubDate>Mon, 04 Dec 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/directives/</guid>
      <description>Validation Directives Directives serve as special instructions or commands for the JSchema parsers, interpreters, and validators. They are used to control various aspects of the validation process or to provide metadata for documentation. Additionally, they offer crucial information about schema and JSON, as well as essential customization of the validation procedure to meet specific requirements.&#xA;Title Directive Within a schema, the title directive is used to provide a name, label, or a brief intent of the schema for which it is written.</description>
    </item>
    <item>
      <title>Specification</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/specification/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/specification/</guid>
      <description>Specification JSchema is a vocabulary that allows you to describe the structure and constraints of JSON documents. It provides a way to define rules for validating the data in a JSON document. With JSchema, you can ensure that your JSON data follows a specific format and adheres to certain rules.&#xA;Grammar JSchema grammar is introduced through a notation similar to what is known as the McKeeman form grammar notation, which is a simplified version of the Backus-Naur form and Extended Backusâ€“Naur form.</description>
    </item>
    <item>
      <title>Data Types</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/datatypes/</link>
      <pubDate>Mon, 04 Dec 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/datatypes/</guid>
      <description>Constraint Data Types Data types play a pivotal role in validating JSON data for compliance with the schema. Essentially, data types determine the kind of data that a JSON element or value can contain. This mechanism serves as a fundamental process in maintaining the accuracy, consistency, and integrity of JSON document and its structure throughout the system, where data quality and reliability are vital.&#xA;In the schema document, data types are denoted by the # prefix.</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/functions/</link>
      <pubDate>Mon, 04 Dec 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/functions/</guid>
      <description>Constraint Functions This document serves as a brief overview, providing key insights into the built-in constraint functions that are part of the core schema. These functions significantly extend the scope of data and structural validation, going beyond the limits of basic data type restrictions. These functions are designed to enhance the effectiveness of schema validation, ensuring the accuracy, consistency, integrity, and compliance of the JSON data to the schema.</description>
    </item>
    <item>
      <title>CScript DSL</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/cscript/</link>
      <pubDate>Thu, 25 Jan 2024 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/cscript/</guid>
      <description>CScript Domain-Specific Language CScript, a domain-specific scripting language, designed specifically for JSchema document. This lightweight, interpreted, and dynamically typed C-style language seamlessly integrates with the foundational principles of the existing JSchema architecture. With the use of dynamic typing and programming constructs similar to both JSON and JavaScript, streamlines the process of writing concise, user-friendly, and flexible logic for constraint or validation functions.&#xA;Although CScript is similar to JavaScript in many aspects, the CScript interpreter is designed to quickly halt (fail-fast) and report errors instead of trying to continue with potentially corrupted or unexpected data.</description>
    </item>
    <item>
      <title>Date and Time</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/datetime/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/datetime/</guid>
      <description>Date and Time Patterns Dates and times are fundamental data types used in a wide range of data exchange scenarios. This schema offers a comprehensive set of tools for managing dates and times, including pattern-based formatting to meet the unique requirements of various systems and applications. Simultaneously, it incorporates validation processes to ensure compliance with the schema.&#xA;Date and time formats are defined using date and time pattern strings. Within these pattern strings, unquoted letters ranging from &amp;lsquo;A&amp;rsquo; to &amp;lsquo;Z&amp;rsquo; and &amp;lsquo;a&amp;rsquo; to &amp;lsquo;z&amp;rsquo; serve as placeholders representing various components of a date or time string.</description>
    </item>
    <item>
      <title>Components</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/components/</link>
      <pubDate>Fri, 15 Dec 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/components/</guid>
      <description>Schema Components A schema component, also known as a reusable schema fragment or sub-schema, plays a vital role in improving readability, reducing redundancy, and organizing the structure of a Schema document. In JSON validation, a schema component or fragment defines a validation rule that can be recursively composed of multiple nested validation rules, collectively specifying the expected and valid format of a JSON construct.&#xA;These schema components are used as an extension of data type validation, as core data types have limited features to validate the internal structure of a composite JSON value or construct.</description>
    </item>
    <item>
      <title>Source Build</title>
      <link>https://relogiclabs.github.io/JSchema-Java/articles/sourcebuild/</link>
      <pubDate>Mon, 04 Dec 2023 09:38:53 +0600</pubDate>
      <guid>https://relogiclabs.github.io/JSchema-Java/articles/sourcebuild/</guid>
      <description>Build from Source Code This comprehensive guide illustrates the procedures for retrieving source code from a GitHub repository, compiling the project source code into a library, and seamlessly integrating the compiled library into your project. It is essential to have a foundational understanding of the Java language, as well as a modest level of familiarity with the Java SDK and command-line interface. Furthermore, some basic knowledge of how to work with Maven packages would be helpful.</description>
    </item>
  </channel>
</rss>
