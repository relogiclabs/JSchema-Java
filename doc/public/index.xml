<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>New Json Schema</title>
    <link>https://relogiclabs.github.io/JsonSchema-Java/</link>
    <description>Recent content on New Json Schema</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Oct 2023 09:38:53 +0600</lastBuildDate><atom:link href="https://relogiclabs.github.io/JsonSchema-Java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/intro/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/intro/</guid>
      <description>Introduction JSON, short for JavaScript Object Notation, is one of the most widely used data exchange formats that are both user-friendly and machine-readable. New JSON Schema is a practical tool for defining and validating the structure of JSON documents. It allows you to specify the expected format, data types, and constraints of JSON data. The following guides offer comprehensive details about the New JSON Schema. This document provides a list of links, each corresponding to a specific detail document available in this project.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/quickstart/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/quickstart/</guid>
      <description>Getting Started This guide will walk you through the essential steps to quickly get up and running with New JSON Schema library. It is also assumes a modest familiarity with the Java SDK and Java command-line interface including basic familiarity with Maven packages. Additionally, it considers a certain level of knowledge in Java language.
Maven Library Package To get started, launch your preferred IDE (such as IntelliJ IDEA, NetBeans IDE, Eclipse IDE, or VS Code) and open the Java project where you intend to include this library package.</description>
    </item>
    
    <item>
      <title>Validation Syntax</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/validation/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/validation/</guid>
      <description>Validation Syntax A JSON document is a structured data format used for the exchange of information between applications. It primarily consists of two types of values: composite values and non-composite values, the latter also referred to as primitive values.
Composite values in a JSON document act as containers. They can hold zero or more composite or non-composite primitive values. These composite values provide the structural framework for organizing data hierarchically within JSON documents.</description>
    </item>
    
    <item>
      <title>Directives</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/directives/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/directives/</guid>
      <description>Validation Directives Directives serve as special instructions or commands for the Schema and JSON parsers, interpreters, and validators. They are used to control various aspects of the validation process or to provide metadata for documentation. Additionally, they offer crucial information about Schema and JSON and provide custom validation functions to meet specific Schema validation requirements.
Title Directive Within a schema, the title directive is used to provide a name, label, or a brief intent of the schema for which it is written.</description>
    </item>
    
    <item>
      <title>Specification</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/specification/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/specification/</guid>
      <description>Specification New JSON Schema is a vocabulary that allows you to describe the structure and constraints of JSON documents. It provides a way to define rules for validating the data in a JSON document. With JSON Schema, you can ensure that your JSON data follows a specific format and adheres to certain rules.
Grammar The New JSON Schema grammar is introduced through a notation similar to what is known as the McKeeman form grammar notation, which is a simplified version of the Backus-Naur form and Extended Backusâ€“Naur form.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/datatypes/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/datatypes/</guid>
      <description>Constraint Data Types Data types play a pivotal role in validating JSON data for compliance with the schema. Essentially, data types determine the kind of data that a JSON element or value can contain. This mechanism serves as a fundamental process in maintaining the accuracy, consistency, and integrity of JSON document and its structure throughout the system, where data quality and reliability are vital.
In the schema document, data types are denoted by the # prefix.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/functions/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/functions/</guid>
      <description>Constraint Functions This document serves as a brief overview, providing key insights into the built-in constraint functions that are part of the core schema. These functions significantly extend the scope of data and structural validation, going beyond the limits of basic data type restrictions. These functions are designed to enhance the effectiveness of schema validation, ensuring the accuracy, consistency, integrity, and compliance of the JSON data to the schema.</description>
    </item>
    
    <item>
      <title>Date and Time</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/datetime/</link>
      <pubDate>Sun, 08 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/datetime/</guid>
      <description>Date and Time Patterns Dates and times are fundamental data types used in a wide range of data exchange scenarios. This schema offers a comprehensive set of tools for managing dates and times, including pattern-based formatting to meet the unique requirements of various systems and applications. Simultaneously, it incorporates validation processes to ensure compliance with the schema.
Date and time formats are defined using date and time pattern strings. Within these pattern strings, unquoted letters ranging from &amp;lsquo;A&amp;rsquo; to &amp;lsquo;Z&amp;rsquo; and &amp;lsquo;a&amp;rsquo; to &amp;lsquo;z&amp;rsquo; serve as placeholders representing various components of a date or time string.</description>
    </item>
    
    <item>
      <title>Source Build</title>
      <link>https://relogiclabs.github.io/JsonSchema-Java/articles/sourcebuild/</link>
      <pubDate>Tue, 10 Oct 2023 09:38:53 +0600</pubDate>
      
      <guid>https://relogiclabs.github.io/JsonSchema-Java/articles/sourcebuild/</guid>
      <description>Build from Source Code This comprehensive guide illustrates the procedures for retrieving source code from a GitHub repository, compiling the project source code into a library, and seamlessly integrating the compiled library into your project. It is important to have a foundational understanding of the Java language, as well as a modest level of familiarity with the Java SDK and command-line interface. You should also have a basic knowledge of how to work with Maven packages.</description>
    </item>
    
  </channel>
</rss>
